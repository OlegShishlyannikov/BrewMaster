#ifndef VT100_HPP
#define VT100_HPP

#include <cstdint>

enum ascii_ctrl_char_e : uint8_t {
  ASCII_CTRL_CH_NUL = '\x0',
  ASCII_CTRL_CH_SOH = '\x1',
  ASCII_CTRL_CH_STX = '\x2',
  ASCII_CTRL_CH_ETX = '\x3',
  ASCII_CTRL_CH_EOT = '\x4',
  ASCII_CTRL_CH_ENQ = '\x5',
  ASCII_CTRL_CH_ACK = '\x6',
  ASCII_CTRL_CH_BEL = '\x7',
  ASCII_CTRL_CH_BS = '\x8',
  ASCII_CTRL_CH_TAB = '\x9',
  ASCII_CTRL_CH_LF = '\xa',
  ASCII_CTRL_CH_VT = '\xb',
  ASCII_CTRL_CH_FF = '\xc',
  ASCII_CTRL_CH_CR = '\xd',
  ASCII_CTRL_CH_SO = '\xe',
  ASCII_CTRL_CH_SI = '\xf',
  ASCII_CTRL_CH_DLE = '\x10',
  ASCII_CTRL_CH_DC1 = '\x11',
  ASCII_CTRL_CH_DC2 = '\x12',
  ASCII_CTRL_CH_DC3 = '\x13',
  ASCII_CTRL_CH_DC4 = '\x14',
  ASCII_CTRL_CH_NAK = '\x15',
  ASCII_CTRL_CH_SYN = '\x16',
  ASCII_CTRL_CH_ETB = '\x17',
  ASCII_CTRL_CH_CAN = '\x18',
  ASCII_CTRL_CH_EM = '\x19',
  ASCII_CTRL_CH_SUB = '\x1a',
  ASCII_CTRL_CH_ESC = '\x1b',
  ASCII_CTRL_CH_FS = '\x1c',
  ASCII_CTRL_CH_GS = '\x1d',
  ASCII_CTRL_CH_RS = '\x1e',
  ASCII_CTRL_CH_US = '\x1f',
  ASCII_CTRL_CH_DEL = '\x7f'
};

enum ascii_ext_char_e : uint16_t {
  ASCII_EXT_CH_LETTER_CAP_C_CEDILLA = L'Ç',
  ASCII_EXT_CH_LETTER_U_UMLAUT = L'ü',
  ASCII_EXT_CH_LETTER_E_ACUTE = L'é',
  ASCII_EXT_CH_A_CIRCUMFLEX = L'â',
  ASCII_EXT_CH_A_UMLAUT = L'ä',
  ASCII_EXT_CH_A_ACCENT = L'à',
  ASCII_EXT_CH_A_RING = L'å',
  ASCII_EXT_CH_C_CEDILLA = L'ç',
  ASCII_EXT_CH_E_CIRCUMFLEX = L'ê',
  ASCII_EXT_CH_E_UMLAUTS = L'ë',
  ASCII_EXT_CH_E_ACCENT = L'è',
  ASCII_EXT_CH_I_UMLAUT = L'ï',
  ASCII_EXT_CH_I_CIRCUMFLEX = L'î',
  ASCII_EXT_CH_I_ACCENT = L'ì',
  ASCII_EXT_CH_CAP_A_UMLAUT = L'Ä',
  ASCII_EXT_CH_CAP_A_RING = L'Å',
  ASCII_EXT_CH_CAP_E_ACUTE = L'É',
  ASCII_EXT_CH_AE = L'æ',
  ASCII_EXT_CH_CAP_AE = L'Æ',
  ASCII_EXT_CH_O_CIRCUMFLEX = L'ô',
  ASCII_EXT_CH_O_UMLAUT = L'ö',
  ASCII_EXT_CH_O_ACCENT = L'ò',
  ASCII_EXT_CH_U_CIRCUMFLEX = L'û',
  ASCII_EXT_CH_U_ACCENT = L'ù',
  ASCII_EXT_CH_Y_UMLAUT = L'ÿ',
  ASCII_EXT_CH_CAP_O_UMLAUT = L'Ö',
  ASCII_EXT_CH_CAP_U_UMLAUT = L'Ü',
  ASCII_EXT_CH_SLASHED_ZERO = L'ø',
  ASCII_EXT_CH_POUND = L'£',
  ASCII_EXT_CH_CAP_SLASHED_ZERO = L'Ø',
  ASCII_EXT_CH_MULT = L'×',
  ASCII_EXT_CH_FLORIN_SIGN = L'ƒ',
  ASCII_EXT_CH_A_ACUTE = L'á',
  ASCII_EXT_CH_I_ACUTE = L'í',
  ASCII_EXT_CH_O_ACUTE = L'ó',
  ASCII_EXT_CH_U_ACUTE = L'ú',
  ASCII_EXT_CH_N_TILDE = L'ñ',
  ASCII_EXT_CH_CAP_N_TILDE = L'Ñ',
  ASCII_EXT_CH_FEMININE_IND = L'ª',
  ASCII_EXT_CH_MASCILINE_IND = L'º',
  ASCII_EXT_CH_INV_QUESTION = L'¿',
  ASCII_EXT_CH_REG_TRADEMARK = L'®',
  ASCII_EXT_CH_LOGIC_NEG = L'¬',
  ASCII_EXT_CH_ONE_HALF = L'½',
  ASCII_EXT_CH_ONE_FOURTH = L'¼',
  ASCII_EXT_CH_INV_EXCL = L'¡',
  ASCII_EXT_CH_RIGHT_GUILLEMETS = L'«',
  ASCII_EXT_CH_LEFT_GUILLEMETS = L'»',
  ASCII_EXT_CH_LD_DOTTED_GCH = L'░',
  ASCII_EXT_CH_MD_DOTTED_GCH = L'▒',
  ASCII_EXT_CH_HD_DOTTED_GCH = L'▓',
  ASCII_EXT_CH_BDS_SINGLE_VERT_LINE = L'│',
  ASCII_EXT_CH_BDS_SINGLE_VERT_LEFT_LINE = L'┤',
  ASCII_EXT_CH_CAP_A_ACUTE = L'Á',
  ASCII_EXT_CH_CAP_A_CIRCUMFLEX = L'Â',
  ASCII_EXT_CH_CAP_A_ACCENT = L'À',
  ASCII_EXT_CH_COPYRIGHT = L'©',
  ASCII_EXT_CH_BDS_DOUBLE_VERT_LEFT_LINE = L'╣',
  ASCII_EXT_CH_BDS_DOUBLE_VERT_LINE = L'║',
  ASCII_EXT_CH_BDS_DOUBLE_LINE_UPPER_RIGHT_CORNER = L'╗',
  ASCII_EXT_CH_BDS_DOUBLE_LINE_LOWER_RIGHT_CORNER = L'╝',
  ASCII_EXT_CH_CENT = L'¢',
  ASCII_EXT_CH_YEN = L'¥',
  ASCII_EXT_CH_BDS_SINGLE_LINE_UPPER_RIGHT_CORNER = L'┐',
  ASCII_EXT_CH_BDS_SINGLE_LINE_LOWER_LEFT_CORNER = L'└',
  ASCII_EXT_CH_BDS_SINGLE_HOR_UP_LINE = L'┴',
  ASCII_EXT_CH_BDS_SINGLE_HOR_DOWN_LINE = L'┬',
  ASCII_EXT_CH_BDS_SINGLE_VERT_RIGHT_LINE = L'├',
  ASCII_EXT_CH_BDS_SINGLE_HOR_LINE = L'─',
  ASCII_EXT_CH_BDS_SINGLE_HOR_VERT_LINE = L'┼',
  ASCII_EXT_CH_A_TILDE = L'ã',
  ASCII_EXT_CH_CAP_A_TILDE = L'Ã',
  ASCII_EXT_CH_BDS_DOUBLE_LINE_LOWER_LEFT_CORNER = L'╚',
  ASCII_EXT_CH_BDS_DOUBLE_LINE_UPPER_LEFT_CORNER = L'╔',
  ASCII_EXT_CH_BDS_DOUBLE_HOR_UP_LINE = L'╩',
  ASCII_EXT_CH_BDS_DOUBLE_HOR_DOWN_LINE = L'╦',
  ASCII_EXT_CH_BDS_DOUBLE_VERT_RIGHT_LINE = L'╠',
  ASCII_EXT_CH_BDS_DOUBLE_HOR_LINE = L'═',
  ASCII_EXT_CH_BDS_DOUBLE_HOR_VERT_LINE = L'╬',
  ASCII_EXT_CH_GEN_CURRENCY = L'¤',
  ASCII_EXT_CH_LETTER_ETH = L'ð',
  ASCII_EXT_CH_CAP_LETTER_ETH = L'Ð',
  ASCII_EXT_CH_CAP_E_CIRCUMFLEX = L'Ê',
  ASCII_EXT_CH_E_UMLAUT = L'Ë',
  ASCII_EXT_CH_CAP_E_ACCENT = L'È',
  ASCII_EXT_CH_DOTLESS_I = L'ı',
  ASCII_EXT_CH_CAP_I_ACUTE = L'Í',
  ASCII_EXT_CH_CAP_I_CIRCUMFLEX = L'Î',
  ASCII_EXT_CH_CAP_I_UMLAUT = L'Ï',
  ASCII_EXT_CH_BDS_SINGLE_LINE_LOWER_RIGHT_CORNER = L'┘',
  ASCII_EXT_CH_BDS_SINGLE_LINE_UPPER_LEFT_CORNER = L'┌',
  ASCII_EXT_CH_BLOCK_GCH = L'█',
  ASCII_EXT_CH_BOTTOM_HALF_BLOCK_GCH = L'▄',
  ASCII_EXT_CH_VERT_BROKEN_LINE = L'¦',
  ASCII_EXT_CH_CAP_I_ACCENT = L'Ì',
  ASCII_EXT_CH_TOP_HALF_BLOCK = L'▀',
  ASCII_EXT_CH_CAP_O_ACUTE = L'Ó',
  ASCII_EXT_CH_LETTER_ESZETT = L'ß',
  ASCII_EXT_CH_CAP_O_CIRCUMFLEX = L'Ô',
  ASCII_EXT_CH_CAP_O_ACCENT = L'Ò',
  ASCII_EXT_CH_O_TILDE = L'õ',
  ASCII_EXT_CH_CAP_O_TILDE = L'Õ',
  ASCII_EXT_CH_MU = L'µ',
  ASCII_EXT_CH_THORN = L'þ',
  ASCII_EXT_CH_CAP_THORN = L'Þ',
  ASCII_EXT_CH_CAP_U_ACUTE = L'Ú',
  ASCII_EXT_CH_CAP_U_CIRCUMFLEX = L'Û',
  ASCII_EXT_CH_CAP_U_ACCENT = L'Ù',
  ASCII_EXT_CH_Y_ACCENT = L'ý',
  ASCII_EXT_CH_CAP_Y_ACCENT = L'Ý',
  ASCII_EXT_CH_MACRON = L'¯',
  ASCII_EXT_CH_ACUTE = L'´',
  ASCII_EXT_CH_CONGUERENCE_RELATION = L'≡',
  ASCII_EXT_CH_PLUS_MINUS = L'±',
  ASCII_EXT_CH_UNDERLINE = L'‗',
  ASCII_EXT_CH_THREE_FOURTH = L'¾',
  ASCII_EXT_CH_PARAGRAPH = L'¶',
  ASCII_EXT_CH_SECTION = L'§',
  ASCII_EXT_CH_DIVISION = L'÷',
  ASCII_EXT_CH_CEDILLA = L'¸',
  ASCII_EXT_CH_DEGREE = L'°',
  ASCII_EXT_CH_DIARESIS = L'¨',
  ASCII_EXT_CH_INTERPUNCT = L'·',
  ASCII_EXT_CH_EXP1 = L'¹',
  ASCII_EXT_CH_EXP3 = L'³',
  ASCII_EXT_CH_EXP2 = L'²',
  ASCII_EXT_CH_BLACK_SQUARE = L'■',
  ASCII_EXT_CH_NBSP = '\\',
};

#define ASCII_CONTROL_RESET_DEVICE (const char *)"\eC"
#define ASCII_CONTROL_ENABLE_LINE_WRAP (const char *)"\e[7h"
#define ASCII_CONTROL_QUERY_DEVICE_CODE (const char *)"\e[c"
#define ASCII_CONTROL_QUERY_DEVICE_STATUS (const char *)"\e[5n"
#define ASCII_CONTROL_QUERY_CURSOR_POS (const char *)"\e[6n"
#define ASCII_CONTROL_DISABLE_LINE_WRAP (const char *)"\e[7l"
#define ASCII_CONTROL_SET_CURSOR_POS (const char *)"\e[%i;%if"

#define ASCII_CONTROL_CURSOR_HOME (const char *)"\e[H"
#define ASCII_CONTROL_CURSOR_LINE_BEGIN (const char *)"\e[1~"
#define ASCII_CONTROL_INS (const char *)"\e[2~"
#define ASCII_CONTROL_DELETE (const char *)"\e[3~"
#define ASCII_CONTROL_CURSOR_LINE_END (const char *)"\e[4~"
#define ASCII_CONTROL_CURSOR_PAGE_UP (const char *)"\e[5~"
#define ASCII_CONTROL_CURSOR_PAGE_DOWN (const char *)"\e[6~"
#define ASCII_CONTROL_CURSOR_UP (const char *)"\e[A"
#define ASCII_CONTROL_CURSOR_DOWN (const char *)"\e[B"
#define ASCII_CONTROL_CURSOR_FORWARD (const char *)"\e[C"
#define ASCII_CONTROL_CURSOR_BACKWARD (const char *)"\e[D"

#define ASCII_CONTROL_REPORT_DEVICE_OK (const char *)"\e[0n"
#define ASCII_CONTROL_REPORT_CURSOR_POS (const char *)"\e[%i;%iR"
#define ASCII_CONTROL_REPORT_DEVICE_FAIL (const char *)"\e[3n"
#define ASCII_CONTROL_REPORT_DEVICE_CODE (const char *)"\e[%i0c"

#define ASCII_CONTROL_KBD_CURSOR_CTRL_UP (const char *)"\eOA"
#define ASCII_CONTROL_KBD_CURSOR_CTRL_DOWN (const char *)"\eOB"
#define ASCII_CONTROL_KBD_CURSOR_CTRL_FORWARD (const char *)"\eOC"
#define ASCII_CONTROL_KBD_CURSOR_CTRL_BACKWARD (const char *)"\eOD"

#define ASCII_CONTROL_SCROLL_DOWN (const char *)"\eD"
#define ASCII_CONTROL_SCROLL_UP (const char *)"\eM"
#define ASCII_CONTROL_SET_TAB (const char *)"\eH"
#define ASCII_CONTROL_SAVE_CURSOR_AND_ATTRS (const char *)"\e\x7"
#define ASCII_CONTROL_RESTORE_CURSOR_AND_ATTRS (const char *)"\e\x8"

#define ASCII_CONTROL_SAVE_CURSOR (const char *)"\e[s"
#define ASCII_CONTROL_UNSAVE_CURSOR (const char *)"\e[u"
#define ASCII_CONTROL_SCROLL_SCREEN_ALL (const char *)"\e[r"
#define ASCII_CONTROL_CLEAR_TAB (const char *)"\e[g"
#define ASCII_CONTROL_CLEAR_ALL_TABS (const char *)"\e[3g"
#define ASCII_CONTROL_ERASE_END_OF_LINE (const char *)"\e[K"
#define ASCII_CONTROL_ERASE_START_OF_LINE (const char *)"\e[1K"
#define ASCII_CONTROL_ERASE_LINE (const char *)"\e[2K"
#define ASCII_CONTROL_ERASE_DOWN (const char *)"\e[J"
#define ASCII_CONTROL_ERASE_UP (const char *)"\e[1J"
#define ASCII_CONTROL_ERASE_SCREEN (const char *)"\e[2J"
#define ASCII_CONTROL_SCROLL_SCREEN_LINE (const char *)"\e[%i;%ir"
#define ASCII_CONTROL_SET_ATTRS (const char *)"\e[%i;%i;%im"

enum ascii_kbd_ctrl_e : uint8_t {
  ASCII_KBD_CTRL_C = 0x03,
  ASCII_KBD_CTRL_Q = 0x11,
  ASCII_KBD_CTRL_A = 0x01,
  ASCII_KBD_CTRL_S = 0x13,
  ASCII_KBD_CTRL_D = 0x04,
  ASCII_KBD_CTRL_Z = 0x1a,
  ASCII_KBD_CTRL_X = 0x18,
  ASCII_KBD_CTRL_R = 0x12,
};

enum ascii_term_attrs_e : uint8_t {
  ASCII_TERM_ATTRS_CLEAR_ALL_ATTRS = 0,
  ASCII_TERM_ATTRS_BRIGHT = 1,
  ASCII_TERM_ATTRS_DIM = 2,
  ASCII_TERM_ATTRS_UNDERSCORE = 4,
  ASCII_TERM_ATTRS_BLINK = 5,
  ASCII_TERM_ATTRS_REVERSE = 7,
  ASCII_TERM_ATTRS_HIDDEN = 8,
  ASCII_TERM_ATTRS_BLACK_FG = 30,
  ASCII_TERM_ATTRS_RED_FG = 31,
  ASCII_TERM_ATTRS_GREEN_FG = 32,
  ASCII_TERM_ATTRS_YELLOW_FG = 33,
  ASCII_TERM_ATTRS_BLUE_FG = 34,
  ASCII_TERM_ATTRS_MAGENTA_FG = 35,
  ASCII_TERM_ATTRS_CYAN_FG = 36,
  ASCII_TERM_ATTRS_WHITE_FG = 37,
  ASCII_TERM_ATTRS_BLACK_BG = 40,
  ASCII_TERM_ATTRS_RED_BG = 41,
  ASCII_TERM_ATTRS_GREEN_BG = 42,
  ASCII_TERM_ATTRS_YELLOW_BG = 43,
  ASCII_TERM_ATTRS_BLUE_BG = 44,
  ASCII_TERM_ATTRS_MAGENTA_BG = 45,
  ASCII_TERM_ATTRS_CYAN_BG = 46,
  ASCII_TERM_ATTRS_WHITE_BG = 47
};

#endif /* VT100_HPP */
